;なでしこv3　キーワードヘルプ
;プラグイン
plugin_system /// なでしこv3のシステム標準の命令を集めたプラグイン。\nWEBブラウザ版/コンソール版を問わず利用できます。
plugin_browser /// なでしこv3のWebブラウザ用のプラグイン。\nブラウザ版でのみ利用できます。
plugin_turtle /// なでしこv3のWebブラウザ用のプラグイン。
plugin_node /// なでしこv3のコンソール版のプラグイン。
plugin_express /// なでしこv3のコンソール版のプラグイン。\nWebサーバを手軽に作成するのに使います。
plugin_sqlite3 /// なでしこv3のコンソール版の拡張プラグイン。\n組み込みデータベースのSQLite3を操作するためのものです。\n(詳しくはデータベースプラグインを参照)
plugin_odbc /// なでしこv3のコンソール版の拡張プラグイン。\nデータベースプラグインでODBCドライバ。Windows専用。
plugin_mssql /// なでしこv3のコンソール版の拡張プラグイン。\nMS SQLServerを操作するためのもの。Windowsで利用可能。
plugin_mysql /// なでしこv3の拡張プラグイン。\nデータベースのMySQLを操作できます。
plugin_postgresql /// なでしこv3の拡張プラグイン。\nデータベースプラグインでPostgreSQLを操作できます。
plugin_firebase /// なでしこv3の拡張プラグイン。\nGoogleのFirebaseを操作できます。
plugin_googlehome /// なでしこv3の拡張プラグイン。\nコマンドライン版で利用可能で、Google Homeを操作します。
plugin_websocket /// なでしこv3の拡張プラグイン。\nコンソール版で利用して、WebSocketサーバを作成するのに使います。
plugin_htmlparser /// なでしこv3の拡張プラグイン。
plugin_ml /// 機械学習のライブラリ。\nなでしこv3の拡張プラグイン。

;plugin_system
;システム定数
ナデシコバージョン /// 説明：定数。実行中のなでしこのバージョン。\n（ブラウザ版/コンソール版）
ナデシコエンジン /// 説明：定数。'nadesi.com/v3'\n（ブラウザ版/コンソール版）
ナデシコ種類 /// 説明：定数。'wnako3/cnako3'\n（ブラウザ版/コンソール版）
はい /// 説明：定数。はい・いいえの選択に使われる。1。\n（ブラウザ版/コンソール版）
いいえ /// 説明：定数。はい・いいえの選択に使われる。0。\n（ブラウザ版/コンソール版）
オン /// 説明：定数。オン・オフの選択に使われる。1。\n（ブラウザ版/コンソール版）
オフ /// 説明：定数。オン・オフの選択に使われる。0。\n（ブラウザ版/コンソール版）
改行 /// 説明：定数。改行を表す。(LFでCRLFではないので注意)'\n'\n（ブラウザ版/コンソール版）
タブ /// 説明：定数。タブを表す。'\t'\n（ブラウザ版/コンソール版）
カッコ /// 説明：定数。文字列の中で'「'を扱う時のエスケープ。\n（ブラウザ版/コンソール版）
カッコ閉 /// 説明：定数。文字列の中で'」'を扱う時のエスケープ。\n（ブラウザ版/コンソール版）
波カッコ /// 説明：定数。文字列の中で'{'を扱う時のエスケープ。\n（ブラウザ版/コンソール版）
波カッコ閉 /// 説明：定数。文字列の中で'}'を扱う時のエスケープ。\n（ブラウザ版/コンソール版）
OK /// 説明：定数。OK・NGの選択に使われる。1。\n（ブラウザ版/コンソール版）
NG /// 説明：定数。OK・NGの選択に使われる。0。\n（ブラウザ版/コンソール版）
PI /// 説明：定数。Math.PI\n（ブラウザ版/コンソール版）
空 /// 説明：定数。空っぽ。「」のこと。\n（ブラウザ版/コンソール版）
NULL /// 説明：定数。null\n（ブラウザ版/コンソール版）
undefined /// 説明：定数。undefined\n（ブラウザ版/コンソール版）
未定義 /// 説明：定数。undefined\n（ブラウザ版/コンソール版）
エラーメッセージ /// 説明：定数。''\n（ブラウザ版/コンソール版）
対象 /// 説明：定数。''\n（ブラウザ版/コンソール版）
対象キー /// 説明：定数。''\n（ブラウザ版/コンソール版）
回数 /// 説明：定数。''\n（ブラウザ版/コンソール版）
CR /// 説明：定数。'\r'\n（ブラウザ版/コンソール版）
LF /// 説明：定数。'\n'\n（ブラウザ版/コンソール版）
空配列 /// 説明：空の配列を返す\n（ブラウザ版/コンソール版）
;標準出力
表示 /// 引数：Sを/Sと\n説明：Sを表示\n（ブラウザ版/コンソール版）
表示ログ /// 説明：''\n（ブラウザ版/コンソール版）
表示ログクリア /// 説明：表示ログを空にする\n（ブラウザ版/コンソール版）
言 /// 引数：Sを/Sと\n説明：Sを表示\n（ブラウザ版/コンソール版）
コンソール表示 /// 引数：Sを/Sと\n説明：Sをコンソール表示する(console.log)\n（ブラウザ版/コンソール版）
;四則演算
足 /// 引数：AにBを/Aと\n説明：AとBを足す\n（ブラウザ版/コンソール版）
引 /// 引数：AからBを\n説明：AからBを引く\n（ブラウザ版/コンソール版）
掛 /// 引数：AにBを/Aと\n説明：AにBを掛ける\n（ブラウザ版/コンソール版）
倍 /// 引数：Aの\n説明：AのB倍を求める\n（ブラウザ版/コンソール版）
割 /// 引数：AをBで\n説明：AをBで割る\n（ブラウザ版/コンソール版）
割余 /// 引数：AをBで\n説明：AをBで割った余りを求める\n（ブラウザ版/コンソール版）
以上 /// 引数：Aが\n説明：AがB以上か\n（ブラウザ版/コンソール版）
以下 /// 引数：Aが\n説明：AがB以下か\n（ブラウザ版/コンソール版）
未満 /// 引数：Aが\n説明：AがB未満か\n（ブラウザ版/コンソール版）
超 /// 引数：Aが\n説明：AがB超か\n（ブラウザ版/コンソール版）
等 /// 引数：AがBと\n説明：AがBと等しいか\n（ブラウザ版/コンソール版）
;特殊命令
JS実行 /// 引数：SRCを/SRCで\n説明：JavaScriptのコードSRCを実行する(変数sysでなでしこシステムを参照できる)\n（ブラウザ版/コンソール版）
JSオブジェクト取得 /// 引数：NAMEの\n説明：なでしこで定義した関数や変数nameのJavaScriptオブジェクトを取得する\n（ブラウザ版/コンソール版）
JS関数実行 /// 引数：NAMEをARGSで\n説明：JavaScriptの関数NAMEを引数ARGS(配列)で実行する\n（ブラウザ版/コンソール版）
ナデシコ /// 引数：CODEを/CODEで\n説明：なでしこのコードCODEを実行する\n（ブラウザ版/コンソール版）
ナデシコ続 /// 引数：CODEを/CODEで\n説明：なでしこのコードCODEを実行する\n（ブラウザ版/コンソール版）
;型変換
変数型確認 /// 引数：Vの\n説明：変数Vの型を返す\n（ブラウザ版/コンソール版）
TYPEOF /// 引数：Vの\n説明：変数Vの型を返す\n（ブラウザ版/コンソール版）
文字列変換 /// 引数：Vを\n説明：値Vを文字列に変換\n（ブラウザ版/コンソール版）
TOSTR /// 引数：Vを\n説明：値Vを文字列に変換\n（ブラウザ版/コンソール版）
整数変換 /// 引数：Vを\n説明：値Vを整数に変換\n（ブラウザ版/コンソール版）
TOINT /// 引数：Vを\n説明：値Vを整数に変換\n（ブラウザ版/コンソール版）
実数変換 /// 引数：Vを\n説明：値Vを実数に変換\n（ブラウザ版/コンソール版）
TOFLOAT /// 引数：Vを\n説明：値Vを実数に変換\n（ブラウザ版/コンソール版）
INT /// 引数：Vの\n説明：値Vを整数に変換\n（ブラウザ版/コンソール版）
FLOAT /// 引数：Vの\n説明：値Vを実数に変換\n（ブラウザ版/コンソール版）
NAN判定 /// 引数：Vを\n説明：値VがNaNかどうかを判定\n（ブラウザ版/コンソール版）
HEX /// 引数：Aの\n説明：値Vを16進数に変換\n（ブラウザ版/コンソール版）
;三角関数
SIN /// 引数：Vの\n説明：ラジアン単位VのSINを求める\n（ブラウザ版/コンソール版）
COS /// 引数：Vの\n説明：ラジアン単位VのCOSを求める\n（ブラウザ版/コンソール版）
TAN /// 引数：Vの\n説明：ラジアン単位VのTANを求める\n（ブラウザ版/コンソール版）
ARCSIN /// 引数：Vの\n説明：ラジアン単位VのARCSINを求める\n（ブラウザ版/コンソール版）
ARCCOS /// 引数：Vの\n説明：ラジアン単位VのARCCOSを求める\n（ブラウザ版/コンソール版）
ARCTAN /// 引数：Vの\n説明：ラジアン単位VのARCTANを求める\n（ブラウザ版/コンソール版）
RAD2DEG /// 引数：Vを\n説明：ラジアンから度に変換\n（ブラウザ版/コンソール版）
DEG2RAD /// 引数：Vを\n説明：度からラジアンに変換\n（ブラウザ版/コンソール版）
度変換 /// 引数：Vを\n説明：ラジアンから度に変換\n（ブラウザ版/コンソール版）
ラジアン変換 /// 引数：Vを\n説明：度からラジアンに変換\n（ブラウザ版/コンソール版）
;算術関数
SIGN /// 引数：Vの\n説明：Vが0なら0を、0超なら1を、0未満なら-1を返す\n（ブラウザ版/コンソール版）
ABS /// 引数：Aの\n説明：Vの絶対値を返す\n（ブラウザ版/コンソール版）
EXP /// 引数：Aの\n説明：e（自然対数の底）の A 乗の値を返す\n（ブラウザ版/コンソール版）
HYPOT /// 引数：AとBの\n説明：直角三角形の二辺の長さA\n（ブラウザ版/コンソール版）
LN /// 引数：Aの\n説明：実数式 A の自然対数（Ln(A) = 1）を返す\n（ブラウザ版/コンソール版）
LOG /// 引数：Aの\n説明：Aの自然対数（底はE）を返す\n（ブラウザ版/コンソール版）
LOGN /// 引数：AでBの\n説明：指定された底AでBの対数を計算して返す\n（ブラウザ版/コンソール版）
FRAC /// 引数：Aの\n説明：実数Aの小数部分を返す\n（ブラウザ版/コンソール版）
乱数 /// 引数：Aの\n説明：0から(A-1)までの乱数を返す\n（ブラウザ版/コンソール版）
SQRT /// 引数：Aの\n説明：Aの平方根を返す\n（ブラウザ版/コンソール版）
平方根 /// 引数：Aの\n説明：Aの平方根を返す\n（ブラウザ版/コンソール版）
RGB /// 引数：RとGのBで\n説明：HTML用のカラーコードを返すRGB(R\n（ブラウザ版/コンソール版）
ROUND /// 引数：Vを\n説明：実数型の値Vを丸めてもっとも近い整数値を返す\n（ブラウザ版/コンソール版）
四捨五入 /// 引数：Vを/Vの\n説明：実数型の値Vを丸めてもっとも近い整数値を返す\n（ブラウザ版/コンソール版）
小数点切上 /// 引数：AをBで\n説明：整数Aを少数点第B桁で切り上げして返す\n（ブラウザ版/コンソール版）
小数点切下 /// 引数：AをBで\n説明：整数Aを少数点第B桁で切り下げして返す\n（ブラウザ版/コンソール版）
小数点四捨五入 /// 引数：AをBで\n説明：実数Aを少数点第B桁で四捨五入して返す\n（ブラウザ版/コンソール版）
CEIL /// 引数：Vを\n説明：数値を正の無限大方向へ切り上げて返す。\n（ブラウザ版/コンソール版）
切上 /// 引数：Vを\n説明：数値を正の無限大方向へ切り上げて返す。\n（ブラウザ版/コンソール版）
FLOOR /// 引数：Vを\n説明：数値を負の無限大方向へ切り下げて返す。\n（ブラウザ版/コンソール版）
切捨 /// 引数：Vを\n説明：数値を負の無限大方向へ切り下げて返す。\n（ブラウザ版/コンソール版）
;論理演算
論理OR /// 引数：AとBの\n説明：(ビット演算で)AとBの論理和を返す(v1非互換)。\n（ブラウザ版/コンソール版）
論理AND /// 引数：AとBの\n説明：(ビット演算で)AとBの論理積を返す(v1非互換)。\n日本語の「AかつB」に相当する\n（ブラウザ版/コンソール版）
論理NOT /// 引数：Vの\n説明：値Vが0ならば1、それ以外ならば0を返す(v1非互換)\n（ブラウザ版/コンソール版）
;ビット演算
OR /// 引数：AとBの\n説明：(ビット演算で)AとBの論理和を返す。\n（ブラウザ版/コンソール版）
AND /// 引数：AとBの\n説明：(ビット演算で)AとBの論理積を返す。\n日本語の「AかつB」に相当する\n（ブラウザ版/コンソール版）
XOR /// 引数：AとBの\n説明：(ビット演算で)AとBの排他的論理和を返す。\n（ブラウザ版/コンソール版）
NOT /// 引数：Vの\n説明：(ビット演算で)vの各ビットを反転して返す。\n（ブラウザ版/コンソール版）
SHIFT_L /// 引数：AをBで\n説明：VをAビット左へシフトして返す\n（ブラウザ版/コンソール版）
SHIFT_R /// 引数：AをBで\n説明：VをAビット右へシフトして返す(符号を維持する)\n（ブラウザ版/コンソール版）
SHIFT_UR /// 引数：AをBで\n説明：VをAビット右へシフトして返す(符号を維持しない、0で埋める)\n（ブラウザ版/コンソール版）
;文字列処理
文字数 /// 引数：Vの\n説明：文字列Vの文字数を返す\n（ブラウザ版/コンソール版）
何文字目 /// 引数：SでAが/Sの\n説明：文字列SでAが何文字目にあるか調べて返す\n（ブラウザ版/コンソール版）
CHR /// 引数：Vの\n説明：文字コードから文字を返す\n（ブラウザ版/コンソール版）
ASC /// 引数：Vの\n説明：文字列Vの最初の文字の文字コードを返す\n（ブラウザ版/コンソール版）
文字挿入 /// 引数：SでIにAを/SのIへ\n説明：文字列SのI文字目に文字列Aを挿入する\n（ブラウザ版/コンソール版）
文字検索 /// 引数：SでAからBを/Sの\n説明：文字列Sで文字列A文字目からBを検索。\n見つからなければ0を返す。\n(類似命令に『何文字目』がある)(v1非互換)\n（ブラウザ版/コンソール版）
追加 /// 引数：SでAを/Sに/Sへ\n説明：文字列SにAを追加して返す(v1非互換)\n（ブラウザ版/コンソール版）
一行追加 /// 引数：SでAを/Sに/Sへ\n説明：文字列SにAと改行を追加して返す(v1非互換)\n（ブラウザ版/コンソール版）
文字列分解 /// 引数：Vを/Vの/Vで\n説明：文字列Vを一文字ずつに分解して返す\n（ブラウザ版/コンソール版）
リフレイン /// 引数：VをCNTで/Vの\n説明：文字列VをCNT回繰り返す(v1非互換)\n（ブラウザ版/コンソール版）
出現回数 /// 引数：SでAの\n説明：文字列SにAが何回出現するか数える\n（ブラウザ版/コンソール版）
MID /// 引数：SでAからCNTを/Sの\n説明：文字列SのA文字目からCNT文字を抽出する\n（ブラウザ版/コンソール版）
文字抜出 /// 引数：SでAからCNTを/SのCNT\n説明：文字列SのA文字目からCNT文字を抽出する\n（ブラウザ版/コンソール版）
LEFT /// 引数：SのCNTだけ/Sで\n説明：文字列Sの左端からCNT文字を抽出する\n（ブラウザ版/コンソール版）
文字左部分 /// 引数：SのCNTだけ/SでCNT\n説明：文字列Sの左端からCNT文字を抽出する\n（ブラウザ版/コンソール版）
RIGHT /// 引数：SのCNTだけ/Sで\n説明：文字列Sの右端からCNT文字を抽出する\n（ブラウザ版/コンソール版）
文字右部分 /// 引数：SのCNTだけ/SでCNT\n説明：文字列Sの右端からCNT文字を抽出する\n（ブラウザ版/コンソール版）
区切 /// 引数：SのAで/Sを\n説明：文字列Sを区切り文字Aで区切って配列で返す\n（ブラウザ版/コンソール版）
切取 /// 引数：SからAまで/SのAを\n説明：文字列Sから文字列Aまでの部分を抽出する(v1非互換)\n（ブラウザ版/コンソール版）
文字削除 /// 引数：SのAからBだけ/Bを/B\n説明：文字列SのA文字目からB文字分を削除して返す\n（ブラウザ版/コンソール版）
;置換・トリム
置換 /// 引数：SのAをBに/SでAからBへ\n説明：文字列Sのうち文字列AをBに全部置換して返す\n（ブラウザ版/コンソール版）
単置換 /// 引数：SのAをBに/SでBへ\n説明：文字列Sのうち、最初に出現するAだけをBに置換して返す\n（ブラウザ版/コンソール版）
トリム /// 引数：Sの/Sを\n説明：文字列Sの前後にある空白を削除する\n（ブラウザ版/コンソール版）
空白除去 /// 引数：Sの/Sを\n説明：文字列Sの前後にある空白を削除する\n（ブラウザ版/コンソール版）
;文字変換
大文字変換 /// 引数：Sの/Sを\n説明：アルファベットの文字列Sを大文字に変換\n（ブラウザ版/コンソール版）
小文字変換 /// 引数：Sの/Sを\n説明：アルファベットの文字列Sを小文字に変換\n（ブラウザ版/コンソール版）
平仮名変換 /// 引数：Sの/Sを\n説明：文字列Sのひらがなをカタカナに変換\n（ブラウザ版/コンソール版）
カタカナ変換 /// 引数：Sの/Sを\n説明：文字列Sのひらがなをカタカナに変換\n（ブラウザ版/コンソール版）
英数全角変換 /// 引数：Sの/Sを\n説明：文字列Sの半角英数文字を全角に変換\n（ブラウザ版/コンソール版）
英数半角変換 /// 引数：Sの/Sを\n説明：文字列Sの全角英数文字を半角に変換\n（ブラウザ版/コンソール版）
英数記号全角変換 /// 引数：Sの/Sを\n説明：文字列Sの半角英数記号文字を全角に変換\n（ブラウザ版/コンソール版）
英数記号半角変換 /// 引数：Sの/Sを\n説明：文字列Sの記号文字を半角に変換\n（ブラウザ版/コンソール版）
カタカナ全角変換 /// 引数：Sの/Sを\n説明：文字列Sの半角カタカナを全角に変換\n（ブラウザ版/コンソール版）
カタカナ半角変換 /// 引数：Sの/Sを\n説明：文字列Sの全角カタカナを半角に変換\n（ブラウザ版/コンソール版）
全角変換 /// 引数：Sの/Sを\n説明：文字列Sの半角文字を全角に変換\n（ブラウザ版/コンソール版）
半角変換 /// 引数：Sの/Sを\n説明：文字列Sの全角文字を半角に変換\n（ブラウザ版/コンソール版）
;JSON
JSONエンコード /// 引数：Vを/Vの\n説明：オブジェクトVをJSON形式にエンコードして返す\n（ブラウザ版/コンソール版）
JSONエンコード整形 /// 引数：Vを/Vの\n説明：オブジェクトVをJSON形式にエンコードして整形して返す\n（ブラウザ版/コンソール版）
JSONデコード /// 引数：Sを/Sの/Sから\n説明：JSON文字列Sをオブジェクトにデコードして返す\n（ブラウザ版/コンソール版）
;正規表現
正規表現マッチ /// 引数：AをBで/AがBに\n説明：文字列Aを正規表現パターンBでマッチして結果を返す(パターンBは「/pat/opt」の形式で指定。\noptにgの指定がなければ部分マッチが『抽出文字列』に入る)\n（ブラウザ版/コンソール版）
抽出文字列 /// 説明：[]\n（ブラウザ版/コンソール版）
正規表現置換 /// 引数：SのAをBで/AからBに/Bへ\n説明：文字列Sの正規表現パターンAをBに置換して結果を返す(パターンAは/pat/optで指定)\n（ブラウザ版/コンソール版）
正規表現区切 /// 引数：SをAで\n説明：文字列Sを正規表現パターンAで区切って配列で返す(パターンAは/pat/optで指定)\n（ブラウザ版/コンソール版）
;指定形式
通貨形式 /// 引数：Vを/Vの\n説明：数値Vを三桁ごとにカンマで区切る\n（ブラウザ版/コンソール版）
ゼロ埋 /// 引数：VをAで\n説明：数値VをA桁の0で埋める\n（ブラウザ版/コンソール版）
空白埋 /// 引数：VをAで\n説明：文字列VをA桁の空白で埋める\n（ブラウザ版/コンソール版）
;文字種類
かなか判定 /// 引数：Sを/Sの/Sが\n説明：文字列Sの1文字目がひらがなか判定\n（ブラウザ版/コンソール版）
カタカナ判定 /// 引数：Sを/Sの/Sが\n説明：文字列Sの1文字目がカタカナか判定\n（ブラウザ版/コンソール版）
数字判定 /// 引数：Sを/Sが\n説明：文字列Sの1文字目が数字か判定\n（ブラウザ版/コンソール版）
数列判定 /// 引数：Sを/Sが\n説明：文字列S全部が数字か判定\n（ブラウザ版/コンソール版）
;配列操作
配列結合 /// 引数：AをSで\n説明：配列Aを文字列Sでつなげて文字列で返す\n（ブラウザ版/コンソール版）
配列検索 /// 引数：AのSを/Aから\n説明：配列Aから文字列Sを探してインデックス番号(0起点)を返す。\n見つからなければ-1を返す。\n（ブラウザ版/コンソール版）
配列要素数 /// 引数：Aの\n説明：配列Aの要素数を返す\n（ブラウザ版/コンソール版）
要素数 /// 引数：Aの\n説明：配列Aの要素数を返す\n（ブラウザ版/コンソール版）
配列挿入 /// 引数：AのIにSを/Iへ\n説明：配列AのI番目(0起点)に要素Sを追加して返す(v1非互換)\n（ブラウザ版/コンソール版）
配列一括挿入 /// 引数：AのIにBを/Iへ\n説明：配列AのI番目(0起点)に配列bを追加して返す(v1非互換)\n（ブラウザ版/コンソール版）
配列ソート /// 引数：Aの/Aを\n説明：配列Aをソートして返す(A自体を変更)\n（ブラウザ版/コンソール版）
配列数値ソート /// 引数：Aの/Aを\n説明：配列Aをソートして返す(A自体を変更)\n（ブラウザ版/コンソール版）
配列カスタムソート /// 引数：FでAの/Aを\n説明：関数Fで配列Aをソートして返す(引数A自体を変更)\n（ブラウザ版/コンソール版）
配列逆順 /// 引数：Aの/Aを\n説明：配列Aを逆にして返す。\nAを書き換える(A自体を変更)。\n（ブラウザ版/コンソール版）
配列シャッフル /// 引数：Aの/Aを\n説明：配列Aをシャッフルして返す。\nAを書き換える\n（ブラウザ版/コンソール版）
配列切取 /// 引数：AのIを\n説明：配列AのI番目(0起点)の要素を切り取って返す。\nAの内容を書き換える。\n（ブラウザ版/コンソール版）
配列取出 /// 引数：AのIからCNTを\n説明：配列AのI番目(0起点)からCNT個の要素を取り出して返す。\nAの内容を書き換える\n（ブラウザ版/コンソール版）
配列ポップ /// 引数：Aの/Aから\n説明：配列Aの末尾を取り出して返す。\nAの内容を書き換える。\n（ブラウザ版/コンソール版）
配列追加 /// 引数：AにBを/Aへ\n説明：配列Aの末尾にBを追加して返す。\nAの内容を書き換える。\n（ブラウザ版/コンソール版）
配列複製 /// 引数：Aを\n説明：配列Aを複製して返す。\n（ブラウザ版/コンソール版）
配列足 /// 引数：AにBを/Aへ/Aと\n説明：配列Aに配列Bを足し合わせて返す。\n（ブラウザ版/コンソール版）
配列最大値 /// 引数：Aの\n説明：配列Aの値の最大値を調べて返す。\n（ブラウザ版/コンソール版）
配列最小値 /// 引数：Aの\n説明：配列Aの値の最小値を調べて返す。\n（ブラウザ版/コンソール版）
;二次元配列処理
表ソート /// 引数：AのNOを\n説明：配列Aの列番号B(0起点)(あるいはキー名)をキーにしてソートする。\nAの内容を書き換える。\n（ブラウザ版/コンソール版）
表ピックアップ /// 引数：AのNOからSを/Sで\n説明：配列Aの列番号B(0起点)(あるいはキー名)で検索文字列Sを含む行を返す\n（ブラウザ版/コンソール版）
表完全一致ピックアップ /// 引数：AのNOからSを/Sで\n説明：配列Aの列番号B(0起点)(あるいはキー名)で検索文字列Sと一致する行を返す\n（ブラウザ版/コンソール版）
表検索 /// 引数：AのCOLでROWからSを/COLに\n説明：二次元配列AでCOL列目(0起点)からキーSを含む行をROW行目から検索して何行目にあるか返す。\n見つからなければ-1を返す。\n（ブラウザ版/コンソール版）
表列数 /// 引数：Aの\n説明：二次元配列Aの列数を調べて返す。\n（ブラウザ版/コンソール版）
表行数 /// 引数：Aの\n説明：二次元配列Aの行数を調べて返す。\n（ブラウザ版/コンソール版）
表行列交換 /// 引数：Aの/Aを\n説明：二次元配列Aの行と列を交換して返す。\n（ブラウザ版/コンソール版）
表右回転 /// 引数：Aの/Aを\n説明：二次元配列Aを90度回転して返す。\n（ブラウザ版/コンソール版）
表重複削除 /// 引数：AのIを/Iで\n説明：二次元配列AのI列目にある重複項目を削除して返す。\n（ブラウザ版/コンソール版）
表列取得 /// 引数：AのIを\n説明：二次元配列AのI列目を返す。\n（ブラウザ版/コンソール版）
表列挿入 /// 引数：AのIにSを/Iへ\n説明：二次元配列Aの(0から数えて)I列目に配列Sを挿入して返す\n（ブラウザ版/コンソール版）
表列削除 /// 引数：AのIを\n説明：二次元配列Aの(0から数えて)I列目削除して返す\n（ブラウザ版/コンソール版）
表列合計 /// 引数：AのIを/Iで\n説明：二次元配列Aの(0から数えて)I列目を合計して返す。\n（ブラウザ版/コンソール版）
表曖昧検索 /// 引数：AのROWからCOLでSを\n説明：二次元配列AのROW行目からCOL列目(0起点)で正規表現Sにマッチする行を検索して何行目にあるか返す。\n見つからなければ-1を返す。\n(v1非互換)\n（ブラウザ版/コンソール版）
表正規表現ピックアップ /// 引数：AのCOLからSを/Aで\n説明：二次元配列AでI列目(0起点)から正規表現パターンSにマッチする行をピックアップして返す。\n（ブラウザ版/コンソール版）
;CSV操作
CSV取得 /// 引数：STRを/STRの/STRで\n説明：CSV形式のデータstrを強制的に二次元配列に変換して返す\n（ブラウザ版/コンソール版）
TSV取得 /// 引数：STRを/STRの/STRで\n説明：TSV形式のデータstrを強制的に二次元配列に変換して返す\n（ブラウザ版/コンソール版）
表CSV変換 /// 引数：Aを\n説明：二次元配列AをCSV形式に変換して返す\n（ブラウザ版/コンソール版）
表TSV変換 /// 引数：Aを\n説明：二次元配列AをTSV形式に変換して返す\n（ブラウザ版/コンソール版）
;ハッシュ
ハッシュキー列挙 /// 引数：Aの\n説明：ハッシュAのキー一覧を配列で返す。\n（ブラウザ版/コンソール版）
ハッシュ内容列挙 /// 引数：Aの\n説明：ハッシュAの内容一覧を配列で返す。\n（ブラウザ版/コンソール版）
ハッシュキー削除 /// 引数：AからKEYを/Aの\n説明：ハッシュAからキーKEYを削除して返す。\n（ブラウザ版/コンソール版）
;日次処理
今 /// 説明：現在時刻を「HH:mm:ss」の形式で返す\n（ブラウザ版/コンソール版）
システム時間 /// 説明：現在のUNIX時間 (UTC(1970/1/1)からの経過秒数) を返す\n（ブラウザ版/コンソール版）
今日 /// 説明：今日の日付を「YYYY/MM/DD」の形式で返す\n（ブラウザ版/コンソール版）
今年 /// 説明：今年の西暦を返す\n（ブラウザ版/コンソール版）
今月 /// 説明：今月を返す(v1非互換)\n（ブラウザ版/コンソール版）
曜日 /// 引数：Sの\n説明：日付Sの曜日を返す\n（ブラウザ版/コンソール版）
UNIX時間変換 /// 引数：Sの/Sを/Sから\n説明：日時SをUNIX時間 (UTC(1970/1/1)からの経過秒数) に変換して返す(v1非互換)\n（ブラウザ版/コンソール版）
UNIXTIME変換 /// 引数：Sの/Sを/Sから\n説明：日時SをUNIX時間 (UTC(1970/1/1)からの経過秒数) に変換して返す\n（ブラウザ版/コンソール版）
日時変換 /// 引数：TMを/TMから\n説明：UNIX時間 (UTC(1970/1/1)からの経過秒数) を「YYYY/MM/DD HH:mm:ss」の形式に変換\n（ブラウザ版/コンソール版）
実行 /// 引数：Fを/Fに/Fで\n説明：無名関数（あるいは、文字列で関数名を指定）Fを実行する(Fが関数でなければ無視する)\n（ブラウザ版/コンソール版）
秒待機 /// 説明：逐次実行構文にて、N秒の間待機する\n（ブラウザ版/コンソール版）
秒後 /// 引数：Fを\n説明：無名関数（あるいは、文字列で関数名を指定）FをN秒後に実行する\n（ブラウザ版/コンソール版）
秒毎 /// 引数：Fを\n説明：無名関数（あるいは、文字列で関数名を指定）FをN秒ごとに実行する(『タイマー停止』で停止できる)\n（ブラウザ版/コンソール版）
秒タイマー開始時 /// 引数：Fを\n説明：無名関数（あるいは、文字列で関数名を指定）FをN秒ごとに実行する(『秒毎』と同じ)\n（ブラウザ版/コンソール版）
タイマー停止 /// 引数：TIMERIDの/TIMERIDで\n説明：『秒毎』や『秒タイマー開始』で開始したタイマーを停止する\n（ブラウザ版/コンソール版）
;デバッグ支援
エラー発生 /// 引数：Sの/Sで\n説明：故意にエラーSを発生させる\n（ブラウザ版/コンソール版）
システム関数一覧取得 /// 説明：システム関数の一覧を取得\n（ブラウザ版/コンソール版）
システム関数存在 /// 引数：FNAMEが/FNAMEの\n説明：文字列で関数名を指定してシステム関数が存在するかを調べる\n（ブラウザ版/コンソール版）
プラグイン一覧取得 /// 説明：利用中のプラグイン一覧を得る\n（ブラウザ版/コンソール版）
モジュール一覧取得 /// 説明：取り込んだモジュール一覧を得る\n（ブラウザ版/コンソール版）
タイムゾーン設定 /// 引数：TZで\n説明：タイムゾーンTをセットする(v1非互換)(タイムゾーンの一覧は https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List 参照)\n（ブラウザ版/コンソール版）

;plugin_browser 
;色定数
水色 /// 説明：'aqua'\n（ブラウザ版）
紫色 /// 説明：'fuchsia'\n（ブラウザ版）
緑色 /// 説明：'lime'\n（ブラウザ版）
青色 /// 説明：'blue'\n（ブラウザ版）
赤色 /// 説明：'red'\n（ブラウザ版）
黄色 /// 説明：'yellow'\n（ブラウザ版）
黒色 /// 説明：'black'\n（ブラウザ版）
白色 /// 説明：'white'\n（ブラウザ版）
茶色 /// 説明：'maroon'\n（ブラウザ版）
灰色 /// 説明：'gray'\n（ブラウザ版）
金色 /// 説明：'gold'\n（ブラウザ版）
黄金色 /// 説明：'gold'\n（ブラウザ版）
銀色 /// 説明：'silver'\n（ブラウザ版）
白金色 /// 説明：'silver'\n（ブラウザ版）
オリーブ色 /// 説明：'olive'\n（ブラウザ版）
ベージュ色 /// 説明：'beige'\n（ブラウザ版）
アリスブルー色 /// 説明：'aliceblue'\n（ブラウザ版）
RGB /// 引数：RとGとBで/Bの\n説明：赤緑青を256段階でそれぞれ指定して、#RRGGBB形式の値を返す\n（ブラウザ版）
色混 /// 引数：Aの\n説明：配列で[RR\n（ブラウザ版）
;システム
終 /// 説明：ブラウザでプログラムの実行を強制終了する\n（ブラウザ版）
;ダイアログ
言 /// 引数：Sと/Sを\n説明：メッセージダイアログにSを表示\n（ブラウザ版）
尋 /// 引数：Sと/Sを\n説明：メッセージSと入力ボックスを出して尋ねる\n（ブラウザ版）
二択 /// 引数：Sで/Sの/Sと/Sを\n説明：メッセージSと[OK]と[キャンセル]のダイアログを出して尋ねる\n（ブラウザ版）
;ブラウザ操作
ブラウザ移動 /// 引数：URLに/URLへ\n説明：任意のURLにブラウザ移動(ただし移動後スクリプトの実行は停止する)\n（ブラウザ版）
ブラウザ戻 /// 説明：任意のURLにブラウザ移動(ただし移動後スクリプトの実行は停止する)\n（ブラウザ版）
;AJAXとHTTP
AJAX送信時 /// 引数：CALLBACKのURLまで/URLへ/URLに\n説明：非同期通信(Ajax)でURLにデータを送信し、成功するとcallbackが実行される。\nその際『対象』にデータが代入される。\n（ブラウザ版）
GET送信時 /// 引数：CALLBACKのURLまで/URLへ/URLに\n説明：非同期通信(Ajax)でURLにデータを送信し、成功するとcallbackが実行される。\nその際『対象』にデータが代入される。\n（ブラウザ版）
POSTデータ生成 /// 引数：PARAMSの/PARAMSを\n説明：連想配列をkey=value&key=value...の形式に変換する\n（ブラウザ版）
POST送信時 /// 引数：CALLBACKのURLまでPARAMSを/URLへ/URLに\n説明：AjaxでURLにPARAMSをPOST送信し『対象』にデータを設定\n（ブラウザ版）
POSTフォーム送信時 /// 引数：CALLBACKのURLまでPARAMSを/URLへ/URLに\n説明：AjaxでURLにPARAMSをフォームとしてPOST送信し『対象』にデータを設定\n（ブラウザ版）
AJAX失敗時 /// 引数：CALLBACKの\n説明：Ajax命令でエラーが起きたとき\n（ブラウザ版）
AJAXオプション /// 説明：''\n（ブラウザ版）
AJAXオプション設定 /// 引数：OPTIONに/OPTIONへ/OPTIONと\n説明：Ajax命令でオプションを設定\n（ブラウザ版）
AJAX送信 /// 引数：URLまで/URLへ/URLに\n説明：逐次実行構文にて、非同期通信(Ajax)でURLにデータを送信する。\n成功すると『対象』にデータが代入される。\n失敗すると『AJAX失敗時』を実行。\n（ブラウザ版）
HTTP取得 /// 引数：URLの/URLから/URLを\n説明：逐次実行構文にて、非同期通信(Ajax)でURLにデータを送信する。\n成功すると『対象』にデータが代入される。\n失敗すると『AJAX失敗時』を実行。\n（ブラウザ版）
POST送信 /// 引数：CALLBACKのURLまでPARAMSを/URLへ/URLに\n説明：逐次実行構文にて、AjaxでURLにPARAMSをPOST送信し『対象』にデータを設定。\n失敗すると『AJAX失敗時』を実行。\n（ブラウザ版）
POSTフォーム送信 /// 引数：URLまでPARAMSを/URLへ/URLに\n説明：AjaxでURLにPARAMSをフォームとしてPOST送信し『対象』にデータを設定。\n失敗すると『AJAX失敗時』を実行。\n（ブラウザ版）
;DOM操作
DOCUMENT /// 説明：定数。''\n（ブラウザ版）
WINDOW /// 説明：定数。''\n（ブラウザ版）
NAVIGATOR /// 説明：定数。''\n（ブラウザ版）
DOM要素ID取得 /// 引数：IDの/IDを\n説明：DOMの要素をIDを指定して取得\n（ブラウザ版）
DOM要素取得 /// 引数：Qの/Qを\n説明：DOMの要素をクエリqで取得して返す\n（ブラウザ版）
DOM要素全取得 /// 引数：Qの/Qを\n説明：DOMの要素をクエリqで全部取得して返す\n（ブラウザ版）
タグ一覧取得 /// 引数：TAGの/TAGを\n説明：任意のタグの一覧を取得して返す\n（ブラウザ版）
DOMイベント設定 /// 引数：DOMのEVENTにFUNCSTRを/EVENTへ\n説明：DOMのEVENTになでしこ関数名funcStrのイベントを設定\n（ブラウザ版）
DOMイベント追加 /// 引数：DOMのEVENTにFUNCSTRを/EVENTへ\n説明：DOMのEVENTになでしこ関数名funcStrのイベントを追加\n（ブラウザ版）
DOMイベント削除 /// 引数：DOMのEVENTからFUNCSTRを\n説明：DOMのEVENTからなでしこ関数名funcStrのイベントを削除\n（ブラウザ版）
DOMイベント発火時 /// 引数：CALLBACKでDOMのEVENTが\n説明：DOMのEVENTが発火した時にCALLBACKを実行するように設定\n（ブラウザ版）
対象イベント /// 説明：定数。''\n（ブラウザ版）
DOMイベント処理停止 /// 引数：EVENTを/EVENTの\n説明：キーイベントやマウスイベントで、元々ブラウザが行う処理を中止する\n（ブラウザ版）
クリック時 /// 引数：FUNCでDOMを\n説明：無名関数FでDOMをクリックした時に実行するイベントを設定\n（ブラウザ版）
読込時 /// 引数：FUNCでDOMを\n説明：無名関数FでDOMを読み込んだ時に実行するイベントを設定\n（ブラウザ版）
フォーム送信時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数Fでフォームを送信した時に実行するイベントを設定\n（ブラウザ版）
押キー /// 説明：定数。キー押した時にそのキーが設定される。\n（ブラウザ版）
キー押時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してキーを押した時に実行するイベントを設定。\n『押されたキー』が設定される。\n（ブラウザ版）
キー離時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してキーを離した時に実行するイベントを設定。\n『押されたキー』が設定される。\n（ブラウザ版）
キータイピング時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してキーをプレスした時に実行するイベントを設定。\n『押されたキー』が設定される。\n（ブラウザ版）
マウスX /// 説明：定数。マウス押した時にマウス位置が設定される。\n（ブラウザ版）
マウスY /// 説明：定数。マウス押した時にマウス位置が設定される。\n（ブラウザ版）
マウス押時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してマウスボタンを押した時に実行するイベントを設定。\n『マウスX』『マウスY』に座標が設定される。\n『対象』にイベントDOM。\n『対象イベント』にイベント引数。\n（ブラウザ版）
マウス移動時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してマウスカーソルが移動した時に実行するイベントを設定。\n『マウスX』『マウスY』に座標が設定される。\n『対象』にイベントDOM。\n『対象イベント』にイベント引数。\n（ブラウザ版）
マウス離時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してマウスボタンを離した時に実行するイベントを設定。\n『マウスX』『マウスY』に座標が設定される。\n『対象』にイベントDOM。\n『対象イベント』にイベント引数。\n（ブラウザ版）
タッチX /// 説明：定数。タッチした時にタッチ位置が設定される。\n（ブラウザ版）
タッチY /// 説明：定数。タッチした時にタッチ位置が設定される。\n（ブラウザ版）
タッチ配列 /// 説明：定数。[]\n（ブラウザ版）
タッチイベント計算 /// 引数：Eの\n説明：タッチイベントで座標計算を行う。\n『タッチX』『タッチY』『対象』『対象イベント』が設定される。\n（ブラウザ版）
タッチ開始時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してタッチを開始した時に実行するイベントを設定。\n（ブラウザ版）
タッチ時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してタッチして指を動かした時に実行するイベントを設定。\n（ブラウザ版）
タッチ終了時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してタッチして指を離した時のイベントを設定。\n（ブラウザ版）
タッチキャンセル時 /// 引数：FUNCでDOMを/DOMの\n説明：無名関数FでDOMに対してタッチイベントをキャンセルした時の動作を設定。\n（ブラウザ版）
DOMテキスト設定 /// 引数：DOMにTEXTを/DOMの/DOMへ\n説明：DOMにテキストを設定\n（ブラウザ版）
DOMテキスト取得 /// 引数：DOMの/DOMから\n説明：DOMのテキストを取得\n（ブラウザ版）
DOM_HTML設定 /// 引数：DOMにTEXTを/DOMの/DOMへ\n説明：DOMにHTML文字列を設定\n（ブラウザ版）
DOM_HTML取得 /// 引数：DOMの/DOMから\n説明：DOMのHTML文字列を取得\n（ブラウザ版）
テキスト設定 /// 引数：DOMにVを/DOMの/DOMへ\n説明：DOMのテキストにVを設定\n（ブラウザ版）
テキスト取得 /// 引数：DOMの/DOMから\n説明：DOMのテキストを取得\n（ブラウザ版）
HTML設定 /// 引数：DOMにVを/DOMの/DOMへ\n説明：DOMのHTMLにVを設定\n（ブラウザ版）
HTML取得 /// 引数：DOMの/DOMから\n説明：DOMのテキストを取得\n（ブラウザ版）
DOM属性設定 /// 引数：DOMのSにVを/Sへ\n説明：DOMの属性Sに値Vを設定\n（ブラウザ版）
DOM属性取得 /// 引数：DOMのSを/DOMから\n説明：DOMの属性Sを取得\n（ブラウザ版）
DOMスタイル設定 /// 引数：DOMのSにVを/Sへ\n説明：DOMのスタイルAに値Bを設定\n（ブラウザ版）
DOMスタイル一括設定 /// 引数：DOMにVALUESを/DOMへ\n説明：DOMに(オブジェクト型で)スタイル情報を一括設定\n（ブラウザ版）
DOMスタイル取得 /// 引数：DOMのSTYLEを\n説明：DOMのSTYLEの値を取得\n（ブラウザ版）
DOMスタイル一括取得 /// 引数：DOMのSTYLEを\n説明：DOMのSTYLE(配列で複数指定)の値を取得\n（ブラウザ版）
DOM要素作成 /// 引数：TAGの/TAGを\n説明：DOMにTAGの新規要素を作成\n（ブラウザ版）
DOM子要素追加 /// 引数：PAにELを/PAへ\n説明：DOMの要素PAの子へ要素ELを追加してPAを返す\n（ブラウザ版）
DOM子要素削除 /// 引数：PAからELを\n説明：DOMの要素PAの子から要素ELを削除してPAを返す\n（ブラウザ版）
;DOM部品操作
DOM親要素 /// 説明：定数。''\n（ブラウザ版）
DOM生成個数 /// 説明：定数。なでしこで作成したDOMの個数が設定される・\n（ブラウザ版）
DOM親要素設定 /// 引数：ELに/ELへ\n説明：「ボタン作成」「エディタ作成」などのDOM要素を追加する対象を指定(デフォルトはdocument)して親要素のDOMオブジェクトを返す\n（ブラウザ版）
ボタン作成 /// 引数：LABELの\n説明：ラベルlabelを持つbutton要素を追加しDOMオブジェクトを返す\n（ブラウザ版）
エディタ作成 /// 引数：TEXTの\n説明：textの値を持つテキストボックス(input[type='text'])の要素を追加しDOMオブジェクトを返す\n（ブラウザ版）
テキストエリア作成 /// 引数：TEXTの\n説明：textの値を持つtextarea要素を追加しDOMオブジェクトを返す\n（ブラウザ版）
ラベル作成 /// 引数：TEXTの\n説明：textの値を持つラベル(span要素)を追加しDOMオブジェクトを返す\n（ブラウザ版）
改行作成 /// 説明：改行(br要素)を追加しDOMオブジェクトを返す\n（ブラウザ版）
チェックボックス作成 /// 引数：TEXTの\n説明：textのラベルを持つチェックボックス(input[type='checkbox'])要素を追加しDOMオブジェクトを返す\n（ブラウザ版）
セレクトボックス作成 /// 引数：OPTIONSの\n説明：配列optionsの選択肢を持つselect要素を追加しDOMオブジェクトを返す\n（ブラウザ版）
;HTML操作
HTML変換 /// 引数：TEXTを\n説明：文字列をHTMLに変換して返す\n（ブラウザ版）
;URLエンコード
URLエンコード /// 引数：TEXTを/TEXTから\n説明：URLエンコードして返す\n（ブラウザ版）
URLデコード /// 引数：TEXTを/TEXTへ/TEXTに\n説明：URLデコードして返す\n（ブラウザ版）
URLパラメータ解析 /// 引数：URLを/URLの/URLから\n説明：URLパラメータを解析してハッシュで返す\n（ブラウザ版）
;ローカルストレージ
保存 /// 引数：VをKEYに/KEYへ\n説明：ブラウザのlocalStorageのキーKに文字列Vを保存\n（ブラウザ版）
開 /// 引数：KEYを/KEYから/KEYの\n説明：ブラウザのlocalStorageからVを読む\n（ブラウザ版）
存在 /// 引数：KEYが\n説明：ブラウザのlocalStorageにKEYが存在しているか調べる\n（ブラウザ版）
ローカルストレージ保存 /// 引数：KEYにVを/KEYへ\n説明：ブラウザのlocalStorageのKにVを保存\n（ブラウザ版）
ローカルストレージ読 /// 引数：KEYを/KEYから/KEYの\n説明：ブラウザのlocalStorageからVを読む\n（ブラウザ版）
ローカルストレージキー列挙 /// 説明：ブラウザのlocalStorageのキー一覧を返す\n（ブラウザ版）
ローカルストレージキー削除 /// 引数：KEYを/KEYの\n説明：ブラウザのlocalStorageのkeyを削除\n（ブラウザ版）
ローカルストレージ全削除 /// 説明：ブラウザのlocalStorageのデータを全部削除する\n（ブラウザ版）
;描画
描画開始 /// 引数：CVの/CVへ/CVで\n説明：描画先にCanvas(文字列でクエリの指定も可)を指定して描画API(2D)の利用準備する\n（ブラウザ版）
描画中キャンバス /// 説明：null\n（ブラウザ版）
線色設定 /// 引数：Vに/Vへ\n説明：Canvasの線の描画色(lineStyle)を指定する\n（ブラウザ版）
塗色設定 /// 引数：Vに/Vへ\n説明：Canvasへの描画色(fillStyle)を指定する\n（ブラウザ版）
線描画 /// 引数：AからBへ/Bまで\n説明：[x1\n（ブラウザ版）
線太設定 /// 引数：Vに/Vへ\n説明：vに線の太さ設定\n（ブラウザ版）
四角描画 /// 引数：Bの/Bへ/Bに\n説明：[x\n（ブラウザ版）
描画クリア /// 引数：Bの/Bへ/Bに\n説明：[x\n（ブラウザ版）
円描画 /// 引数：XYへRの/XYに\n説明：[x\n（ブラウザ版）
楕円描画 /// 引数：ARGSへ/ARGSに/ARGSの\n説明：[x\n（ブラウザ版）
多角形描画 /// 引数：Aで/Aの/Aを\n説明：座標配列vを指定して多角形を描画する\n（ブラウザ版）
画像描画 /// 引数：XYへIMGの/XYにIMGを\n説明：[x\n（ブラウザ版）
描画フォント設定 /// 引数：Nを/Nの/Nで/Nに\n説明：描画フォントを指定する(CSSのフォント設定と同じ 例「36px Aria」)\n（ブラウザ版）
文字描画 /// 引数：XYへSの/XYにSを\n説明：[x\n（ブラウザ版）
;位置情報
位置情報取得時 /// 引数：FUNCの/FUNCに/FUNCへ\n説明：位置情報を取得してコールバック関数内で変数「対象」に配列で[緯度\n（ブラウザ版）
位置情報監視時 /// 引数：FUNCの/FUNCに/FUNCへ\n説明：位置情報を監視してIDを返す。\n引数に指定したコールバック関数内で変数「対象」に配列で[緯度\n（ブラウザ版）
位置情報監視停止 /// 引数：WIDの\n説明：『位置情報監視時』で開始した監視を停止する\n（ブラウザ版）
;音声合成
話 /// 引数：Sと/Sを/Sの\n説明：音声合成APIを使って、Sを発話する\n（ブラウザ版）
話終時 /// 引数：CALLBACKでSと/Sを/Sの\n説明：音声合成APIを使って、Sを発話し発話した後でcallbackを実行\n（ブラウザ版）
話者一覧取得 /// 説明：音声合成APIの話者一覧を得る\n（ブラウザ版）
話者設定 /// 引数：Vに/Vへ\n説明：音声合成APIの話者を指定する\n（ブラウザ版）
話者速度 /// 説明：1\n（ブラウザ版）
話者声高 /// 説明：1\n（ブラウザ版）
話者音量 /// 説明：1\n（ブラウザ版）
話者詳細設定 /// 引数：OBJで/OBJに/OBJへ\n説明：音声合成APIの話者の設定をオブジェクト形式で設定する。\n『速度『速度,声高,ピッチ,音量』を指定。\n（ブラウザ版）
;WebSocket
WS接続完了時 /// 引数：CALLBACKを\n説明：WebSocketでサーバに接続完了した時に実行されるイベントを指定\n（ブラウザ版）
WS受信時 /// 引数：CALLBACKを\n説明：WebSocketでサーバからメッセージを受信した時に実行されるイベントを指定\n（ブラウザ版）
WSエラー発生時 /// 引数：CALLBACKを\n説明：WebSocketでエラーが発生した時に実行されるイベントを指定\n（ブラウザ版）
WS接続 /// 引数：Sに/Sへ/Sの\n説明：WebSocketサーバsに接続する\n（ブラウザ版）
WS送信 /// 引数：Sを/Sと\n説明：アクティブなWebSocketへsを送信する\n（ブラウザ版）
WS切断 /// 説明：アクティブなWebSocketを閉じる\n（ブラウザ版）
;オーディオ
オーディオ開 /// 引数：URLを/URLの\n説明：オーディオファイルのURLを指定して、オーディオを読み込み、Audioオブジェクトを返す\n（ブラウザ版）
オーディオ再生 /// 引数：OBJを\n説明：AudioオブジェクトOBJを指定してオーディをを再生\n（ブラウザ版）
オーディオ停止 /// 引数：OBJを\n説明：AudioオブジェクトOBJを指定してオーディをを停止\n（ブラウザ版）
ホットキー登録 /// 引数：KEYにFNAMEを/KEYで\n説明：ホットキーKEYにEVENTを登録する\n（ブラウザ版）
ホットキー解除 /// 引数：KEYを/KEYの\n説明：ホットキーKEYを解除する\n（ブラウザ版）

;plugin_turtle
;タートルグラフィックス/カメ操作
カメ作成 /// 説明：タートルグラフィックスを開始してカメのIDを返す\n（ブラウザ版）
ゾウ作成 /// 説明：ゾウの画像でタートルグラフィックスを開始してIDを返す\n（ブラウザ版）
パンダ作成 /// 説明：パンダの画像でタートルグラフィックスを開始してIDを返す\n（ブラウザ版）
カメ操作対象設定 /// 引数：IDに/IDへ/IDの\n説明：IDを指定して操作対象となるカメを変更する\n（ブラウザ版）
カメ描画先 /// 説明：'turtle_cv'\n（ブラウザ版）
カメ画像URL /// 説明：'turtle.png'\n（ブラウザ版）
カメ画像変更 /// 引数：URLに/URLへ\n説明：カメの画像をURLに変更する\n（ブラウザ版）
カメ速度 /// 説明：100\n（ブラウザ版）
カメ速度設定 /// 引数：Vに/Vへ\n説明：カメの動作速度vに設定(大きいほど遅い)\n（ブラウザ版）
カメ移動 /// 引数：XYに/XYへ\n説明：カメの位置を[x\n（ブラウザ版）
カメ起点移動 /// 引数：XYに/XYへ\n説明：カメの描画起点位置を[x\n（ブラウザ版）
カメ進 /// 引数：Vだけ\n説明：カメの位置をVだけ進める\n（ブラウザ版）
カメ戻 /// 引数：Vだけ\n説明：カメの位置をVだけ戻す\n（ブラウザ版）
カメ角度設定 /// 引数：Vに/Vへ/Vの\n説明：カメの向きをDEGに設定する\n（ブラウザ版）
カメ右回転 /// 引数：Vだけ\n説明：カメの向きをDEGだけ右に向ける\n（ブラウザ版）
カメ左回転 /// 引数：Vだけ\n説明：カメの向きをDEGだけ左に向ける\n（ブラウザ版）
カメペン色設定 /// 引数：Cに/Cへ\n説明：カメのペン描画色をCに設定する\n（ブラウザ版）
カメペンサイズ設定 /// 引数：Wに/Wへ\n説明：カメペンのサイズをWに設定する\n（ブラウザ版）
カメペン設定 /// 引数：Wに/Wへ\n説明：カメペンを使うかどうかをV(オン/オフ)に設定する\n（ブラウザ版）
カメ全消去 /// 説明：表示しているカメと描画内容を全部消去する\n（ブラウザ版）
カメ非表示 /// 説明：カメの画像を非表示にする。\n描画に影響しない。\n（ブラウザ版）
カメ表示 /// 説明：非表示にしたカメを表示する。\n（ブラウザ版）
カメクリック時 /// 引数：FUNCを\n説明：操作対象のカメをクリックした時のイベントを設定する\n（ブラウザ版）

;plugin_node
;ファイル入出力
開 /// 引数：Sを/Sから\n説明：ファイルSを開く\n（コンソール版）
読 /// 引数：Sを/Sから\n説明：ファイルSを開く\n（コンソール版）
バイナリ読 /// 引数：Sを/Sから\n説明：ファイルSをバイナリ(Buffer)として開く\n（コンソール版）
保存 /// 引数：SをFへ/Fに\n説明：データSをファイルFヘ書き込む\n（コンソール版）
起動待機 /// 引数：Sを\n説明：シェルコマンドSを起動し実行終了まで待機する\n（コンソール版）
起動 /// 引数：Sを\n説明：シェルコマンドSを起動\n（コンソール版）
起動時 /// 引数：CALLBACKでSを\n説明：シェルコマンドSを起動\n（コンソール版）
ブラウザ起動 /// 引数：URLを\n説明：ブラウザでURLを起動\n（コンソール版）
ファイル列挙 /// 引数：Sの/Sを/Sで\n説明：パスSのファイル名（フォルダ名）一覧を取得する。\nワイルドカード可能。\n「*.jpg;*.png」など複数の拡張子を指定可能。\n（コンソール版）
全ファイル列挙 /// 引数：Sの/Sを/Sで\n説明：パスS以下の全ファイル名を取得する。\nワイルドカード可能。\n「*.jpg;*.png」のように複数の拡張子を指定可能。\n（コンソール版）
存在 /// 引数：PATHが/PATHの\n説明：ファイルPATHが存在するか確認して返す\n（コンソール版）
フォルダ存在 /// 引数：PATHが/PATHの\n説明：ディレクトリPATHが存在するか確認して返す\n（コンソール版）
フォルダ作成 /// 引数：PATHの/PATHを/PATHに/PATHへ\n説明：ディレクトリPATHを作成して返す(再帰的に作成)\n（コンソール版）
ファイルコピー /// 引数：AからBに/AをBへ\n説明：パスAをパスBへファイルコピーする\n（コンソール版）
ファイルコピー時 /// 引数：CALLBACKでAからBに/AをBへ\n説明：パスAをパスBへファイルコピーしてcallbackを実行\n（コンソール版）
ファイル移動 /// 引数：AからBに/AをBへ\n説明：パスAをパスBへ移動する\n（コンソール版）
ファイル移動時 /// 引数：CALLBACKでAからBに/AをBへ\n説明：パスAをパスBへ移動してcallbackを実行\n（コンソール版）
ファイル削除 /// 引数：PATHの/PATHを\n説明：パスPATHを削除する\n（コンソール版）
ファイル削除時 /// 引数：CALLBACKでPATHの/PATHを\n説明：パスPATHを削除してcallbackを実行\n（コンソール版）
ファイル情報取得 /// 引数：PATHの/PATHから\n説明：パスPATHの情報を調べてオブジェクトで返す\n（コンソール版）
ファイルサイズ取得 /// 引数：PATHの/PATHから\n説明：パスPATHのファイルサイズを調べて返す\n（コンソール版）
;パス操作
ファイル名抽出 /// 引数：Sから/Sの\n説明：フルパスのファイル名Sからファイル名部分を抽出して返す\n（コンソール版）
パス抽出 /// 引数：Sから/Sの\n説明：ファイル名Sからパス部分を抽出して返す\n（コンソール版）
相対パス展開 /// 引数：AをBで\n説明：ファイル名AからパスBを展開して返す\n（コンソール版）
;フォルダ取得
カレントディレクトリ取得 /// 説明：カレントディレクトリを返す\n（コンソール版）
カレントディレクトリ変更 /// 引数：DIRに/DIRへ\n説明：カレントディレクトリをDIRに変更する\n（コンソール版）
作業フォルダ取得 /// 説明：カレントディレクトリを返す\n（コンソール版）
作業フォルダ変更 /// 引数：DIRに/DIRへ\n説明：カレントディレクトリをDIRに変更する\n（コンソール版）
ホームディレクトリ取得 /// 説明：ホームディレクトリを取得して返す\n（コンソール版）
デスクトップ /// 説明：デスクトップパスを取得して返す\n（コンソール版）
マイドキュメント /// 説明：マイドキュメントのパスを取得して返す\n（コンソール版）
母艦パス /// 説明：''\n（コンソール版）
母艦パス取得 /// 説明：スクリプトのあるディレクトリを返す\n（コンソール版）
;環境変数
環境変数取得 /// 引数：Sの\n説明：環境変数Sを返す\n（コンソール版）
環境変数一覧取得 /// 説明：環境変数の一覧を返す\n（コンソール版）
;圧縮解凍
圧縮解凍ツールパス変更 /// 引数：Vに/Vへ\n説明：圧縮解凍に使うツールを取得変更する\n（コンソール版）
解凍 /// 引数：AをBに/AからBへ\n説明：(v1非互換)ZIPファイルAをBに解凍(実行には7-zipが必要-https://goo.gl/LmKswH)\n（コンソール版）
解凍時 /// 引数：CALLBACKでAをBに/AからBへ\n説明：解凍処理を行い、処理が完了したときにcallback処理を実行\n（コンソール版）
圧縮 /// 引数：AをBに/AからBへ\n説明：(v1非互換)ファイルAをBにZIP圧縮(実行には7-zipが必要-https://goo.gl/LmKswH)\n（コンソール版）
圧縮時 /// 引数：CALLBACKでAをBに/AからBへ\n説明：圧縮処理を行い完了したときにcallback処理を指定\n（コンソール版）
;Nodeプロセス
終 /// 説明：Nodeでプログラム実行を強制終了する\n（コンソール版）
終了 /// 説明：Nodeでプログラム実行を強制終了する\n（コンソール版）
秒待 /// 引数：SEC\n説明：NodeでN秒待つ\n（コンソール版）
OS取得 /// 説明：OSプラットフォームを返す(darwin/win32/linux)\n（コンソール版）
OSアーキテクチャ取得 /// 説明：OSアーキテクチャを返す\n（コンソール版）
;クリップボード
クリップボード /// 引数：Vを\n説明：クリップボードを取得設定（『クリップボード＝値』で書換が可能）\n（コンソール版）
;コマンドライン
コマンドライン /// 説明：''\n（コンソール版）
ナデシコランタイム /// 説明：''\n（コンソール版）
ナデシコランタイムパス /// 説明：''\n（コンソール版）
標準入力取得時 /// 引数：CALLBACKを\n説明：標準入力を一行取得した時に、無名関数（あるいは、文字列で関数名を指定）F(s)を実行する\n（コンソール版）
尋 /// 引数：MSGと/MSGを\n説明：標準入力を一行取得する\n（コンソール版）
;テスト
ASSERT等 /// 引数：AとBが\n説明：mochaによるテストで、ASSERTでAとBが正しいことを報告する\n（コンソール版）
;ネットワーク
自分IPアドレス取得 /// 説明：ネットワークアダプターからIPアドレス(IPv4)を取得して配列で返す\n（コンソール版）
自分IPV6アドレス取得 /// 説明：ネットワークアダプターからIPアドレス(IPv6)を取得して配列で返す\n（コンソール版）
;Ajax
AJAX送信時 /// 引数：CALLBACKのURLまで/URLへ/URLに\n説明：非同期通信(Ajax)でURLにデータを送信し、成功するとcallbackが実行される。\nその際『対象』にデータが代入される。\n（コンソール版）
GET送信時 /// 引数：CALLBACKのURLまで/URLへ/URLに\n説明：非同期通信(Ajax)でURLにデータを送信し、成功するとcallbackが実行される。\nその際『対象』にデータが代入される。\n（コンソール版）
POST送信時 /// 引数：CALLBACKのURLまでPARAMSを/URLへ/URLに\n説明：AjaxでURLにPARAMSをPOST送信し『対象』にデータを設定\n（コンソール版）
POSTフォーム送信時 /// 引数：CALLBACKのURLまでPARAMSを/URLへ/URLに\n説明：AjaxでURLにPARAMSをフォームとしてPOST送信し『対象』にデータを設定\n（コンソール版）
AJAX失敗時 /// 引数：CALLBACKの\n説明：Ajax命令でエラーが起きたとき\n（コンソール版）
AJAXオプション /// 説明：''\n（コンソール版）
AJAXオプション設定 /// 引数：OPTIONに/OPTIONへ/OPTIONと\n説明：Ajax命令でオプションを設定\n（コンソール版）
;文字コード
文字コード変換サポート判定 /// 引数：CODEの/CODEを\n説明：文字コードCODEをサポートしているか確認\n（コンソール版）
SJIS変換 /// 引数：STRに/STRへ/STRを\n説明：(v1非互換)文字列をShift_JISのバイナリバッファに変換\n（コンソール版）
SJIS取得 /// 引数：BUFから/BUFを/BUFで\n説明：Shift_JISのバイナリバッファを文字列に変換\n（コンソール版）
エンコーディング変換 /// 引数：SをCODEへ/CODEで\n説明：文字列SをCODEへ変換してバイナリバッファを返す\n（コンソール版）
エンコーディング取得 /// 引数：BUFをCODEから/CODEで\n説明：バイナリバッファBUFをCODEから変換して返す\n（コンソール版）
;マウスとキーボード操作
キー送信 /// 引数：Sを/Sの\n説明：Sのキーを送信\n（コンソール版）
窓アクティブ /// 引数：Sを/Sの\n説明：Sの窓をアクティブにする\n（コンソール版）

;plugin_express
;Webサーバ(Express)
GETデータ /// 説明：''\n（コンソール版）
POSTデータ /// 説明：''\n（コンソール版）
WEBサーバ名前設定 /// 引数：NAMEに/NAMEへ\n説明：Webサーバの名前を変更する\n（コンソール版）
WEBサーバ起動 /// 引数：CALLBACKまでPORTNOの/PORTNOで\n説明：ポートPORTNOでWebサーバを起動して成功したら『WEBサーバ起動成功した時』を実行する\n（コンソール版）
WEBサーバ起動成功時 /// 引数：CALLBACKを\n説明：WEBサーバ起動が成功した時にcallbackを実行\n（コンソール版）
WEBサーバ起動失敗時 /// 引数：CALLBACKを\n説明：WEBサーバ起動が失敗した時にcallbackを実行\n（コンソール版）
WEBサーバ静的パス指定 /// 引数：URLをPATHに/PATHへ\n説明：サーバのHTMLや画像などを配置する静的パスを指定する\n（コンソール版）
WEBサーバGET時 /// 引数：CALLBACKをURIに/URIへ\n説明：URIにGETメソッドがあった時の処理を指定\n（コンソール版）
WEBサーバPOST時 /// 引数：CALLBACKをURIに/URIへ\n説明：URIにPOSTメソッドがあった時の処理を指定\n（コンソール版）
WEBサーバPUT時 /// 引数：CALLBACKをURIに/URIへ\n説明：URIにPOSTメソッドがあった時の処理を指定\n（コンソール版）
WEBサーバDELETE時 /// 引数：CALLBACKをURIに/URIへ\n説明：URIにPOSTメソッドがあった時の処理を指定\n（コンソール版）
WEBサーバ出力 /// 引数：Sを/Sと\n説明：クライアントにSを出力\n（コンソール版）
WEBサーバリダイレクト /// 引数：URLへ/URLに\n説明：URLにリダイレクトする\n（コンソール版）

;plugin_sqlite3 (拡張プラグイン)
;SQLite3
SQLITE3今挿入ID /// 説明：'?'\n（コンソール版／拡張）
SQLITE3開 /// 引数：Sを/Sの\n説明：SQlite3のデータベースを開いて、データベースオブジェクトを返す\n（コンソール版／拡張）
SQLITE3閉 /// 説明：アクティブなSQlite3のデータベースを閉じる\n（コンソール版／拡張）
SQLITE3切替 /// 引数：DBに/DBへ\n説明：アクティブなSQlite3のデータベースをDB(SQLITE3開くで開いたもの)に切り替える\n（コンソール版／拡張）
SQLITE3実行後 /// 引数：FにSQLをPARAMSで\n説明：SQLをパラメータPARAMSで実行する。\n完了するとコールバック関数Fを実行する。\n（コンソール版／拡張）
SQLITE3取得後 /// 引数：FにSQLをPARAMSで\n説明：SQLをパラメータPARAMSで取得実行する。\n完了するとコールバック関数Fが実行され、結果は第一引数に与えられる。\n（コンソール版／拡張）
SQLITE3逐次実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文にて、SQLとパラメータPARAMSでSQLを実行し、変数『対象』に結果を得る。\n（コンソール版／拡張）
SQLITE3逐次全取得 /// 引数：SQLをPARAMSで\n説明：逐次実行構文内で、SQLとパラメータPARAMSでSQLを実行して結果を得る。\n（コンソール版／拡張）
SQLITE3逐次取得 /// 引数：SQLをPARAMSで\n説明：逐次実行構文内で、SQLとパラメータPARAMSでSQLを実行して結果を得る。\n（コンソール版／拡張）

;plugin_odbc (拡張プラグイン)
;ODBC
ODBC逐次開 /// 引数：Sを/Sの/Sで\n説明：逐次実行構文にて、ODBCのデータベースを開く\n（コンソール版／拡張）
ODBC開 /// 引数：Sを/Sの/Sで\n説明：ODBCのデータベースを同期的に開いてオブジェクトを返す\n（コンソール版／拡張）
ODBC逐次実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文にて、SQLとパラメータPARAMSでSQLを実行し、変数『対象』に結果を得る。\n（コンソール版／拡張）
ODBC実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文内で、SQLとパラメータPARAMSでSQLを実行して結果を得る。\n（コンソール版／拡張）
ODBC閉 /// 説明：ODBCで開いているデータベースを閉じる\n（コンソール版／拡張）
ODBC逐次閉 /// 説明：逐次実行構文でODBCで開いているデータベースを閉じる\n（コンソール版／拡張）
ODBCトランザクション開始 /// 説明：ODBCでトランザクションを開始する\n（コンソール版／拡張）
ODBCトランザクション終了 /// 説明：ODBCでトランザクションを終了する\n（コンソール版／拡張）

;plugin_mssql (拡張プラグイン)
;SQLServer
MSSQL逐次開 /// 引数：Sを/Sの/Sで\n説明：逐次実行構文にてデータベースを開く\n（コンソール版／拡張）
MSSQL逐次実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文にて、SQLとパラメータPARAMSでSQLを実行し、変数『対象』に結果を得る。\n（コンソール版／拡張）
MSSQL逐次閉 /// 説明：開いているデータベースを閉じる\n（コンソール版／拡張）

;plugin_mysql (拡張プラグイン)
;MySQL
MYSQL開 /// 引数：Sを/Sの/Sで\n説明：データベースを開く\n（コンソール版／拡張）
MYSQL閉 /// 説明：データベースを閉じる\n（コンソール版／拡張）
MYSQL逐次実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文にて、SQLとパラメータPARAMSでSQLを実行し、変数『対象』に結果を得る。\nINSERT句の場合は『対象[insertId]』でIDが得られる。\n（コンソール版／拡張）

;plugin_postgresql (拡張プラグイン)
;PostgreSQL
PG開 /// 引数：Sを/Sの/Sで\n説明：データベースを開く
PG閉 /// 説明：データベースを閉じる
PG逐次実行 /// 引数：SQLをPARAMSで\n説明：逐次実行構文にて、SQLとパラメータPARAMSでSQLを実行し、変数『対象』に結果を得る。\nSELECT句以外を実行した時も情報が『対象』に入る。\n

;plugin_firebase (拡張プラグイン)
;Firebase
FIREBASE初期化 /// 引数：CONFIGで\n説明：アカウント設定オブジェクトconfigを与えてFirebaseを初期化する。\n（拡張）
FIREBASEパス参照 /// 引数：PATHを\n説明：データベースのパスPATHを参照。\n（拡張）
FIREBASE値設定 /// 引数：PATHにVALUESを/PATHへVALUESの\n説明：データベースのパスPATHにオブジェクトVALUESを設定。\n（拡張）
FIREBASE値変更時 /// 引数：CALLBACKでPATHの\n説明：パスpathの値(オブジェクト)が変更された時callbackを実行。\n引数に値(オブジェクト)が得られる。\n（拡張）
FIREBASE値取得時 /// 引数：CALLBACKでPATHの\n説明：パスpathの値を取得した時callbackを実行。\n引数に値(オブジェクト)が得られる。\n（拡張）

;plugin_googlehome (拡張プラグイン)
;GoogleHome
GoogleHome接続 /// 引数：NAMEへ/NAMEに/NAMEの\n説明：LAN内にある名前NAMEのGoogleHomeに接続する\n（コマンドライン版／拡張）
GoogleHome言 /// 引数：Sと/Sを\n説明：GoogleHomeにSと言わせる\n（コマンドライン版／拡張）
GoogleHome話 /// 引数：Sと/Sを\n説明：GoogleHomeにSと言わせる\n（コマンドライン版／拡張）
GoogleHome再生 /// 引数：Sを/Sで\n説明：GoogleHomeでMP3を再生する\n（コマンドライン版／拡張）

;plugin_websocket (拡張プラグイン)
;WebSocketサーバ
WSサーバ起動 /// 引数：PORTNOの/PORTNOで\n説明：ポートPORTNOでWebサーバを起動して成功したら『WSサーバ起動成功した時』を実行する\n（コンソール版／拡張）
WSサーバ起動成功時 /// 引数：CALLBACKを\n説明：WSサーバ起動が成功した時にcallbackを実行\n（コンソール版／拡張）
WSサーバ起動失敗時 /// 引数：CALLBACKを\n説明：WSサーバ起動が失敗した時にcallbackを実行\n（コンソール版／拡張）
WSサーバ接続時 /// 引数：CALLBACKを\n説明：WSサーバにクライアントが接続してきた時callbackを実行。\n接続情報は、変数『対象』に入る\n（コンソール版／拡張）
WSサーバ受信時 /// 引数：CALLBACKで\n説明：WSサーバでメッセージを受信した時に実行される。\n受信データは『対象』に代入される\n（コンソール版／拡張）
WSサーバ全送信 /// 引数：Sを\n説明：WSサーバで全員にメッセージSを送信する\n（コンソール版／拡張）
WSクライアント一覧取得 /// 引数：Sを\n説明：WSサーバに接続しているクライアントの一覧を返す\n（コンソール版／拡張）

;plugin_htmlparser (拡張プラグイン)
;HTMLパーサ(コンソール)
HTML応答ヘッダ /// 説明：''\n（拡張）
HTML逐次URL開 /// 引数：URLを\n説明：任意のURLを開いてパースする。\n（拡張）
HTMLパース /// 引数：HTMLを\n説明：任意のHTML文字列をパースする。\n（拡張）
DOM要素取得 /// 引数：Qを/Qの/Qから\n説明：パース済みHTMLからクエリQに該当するDOMを取得する。\n（拡張）
DOM子要素検索 /// 引数：DOMのQを/DOMから\n説明：DOMの子要素Qを取得する。\n（拡張）
DOM子要素全取得 /// 引数：DOMの/DOMから\n説明：DOMの子要素を全部取得する。\n（拡張）
DOM親要素取得 /// 引数：Qを/Qの/Qから\n説明：DOMの親要素を取得する。\n（拡張）
DOM次要素取得 /// 引数：Qを/Qの/Qから\n説明：DOMの親要素を取得する。\n（拡張）
DOM抽出 /// 引数：DOMからQを/DOMの\n説明：DOMからクエリQを利用して合致するものを抽出する。\n（拡張）
属性取得 /// 引数：DOMからKを/DOMの\n説明：DOMの属性Kを取得する。\n（拡張）
テキスト取得 /// 引数：DOMから/DOMの\n説明：DOMのテキストを取得する。\n（拡張）
HTML取得 /// 引数：DOMから/DOMの\n説明：DOMのHTMLを取得する。\n（拡張）
HTML設定 /// 引数：DOMにSを/DOMへ\n説明：DOMにSを設定する。\n（拡張）
プロパティ取得 /// 引数：DOMからPROPを/DOMの\n説明：DOMのプロパティPROPを取得する。\n（拡張）
値取得 /// 引数：DOMから/DOMの\n説明：DOMの値を取得する。\n（拡張）
値設定 /// 引数：DOMにVを/DOMへ\n説明：DOMの値vを設定する。\n（拡張）
スタイル取得 /// 引数：DOMからKを/DOMの\n説明：DOMのスタイルKを取得する。\n（拡張）
データ取得 /// 引数：DOMからKを/DOMの\n説明：DOMのデータkを取得する。\n（拡張）
DOM配列変換 /// 引数：DOMから/DOMを\n説明：DOMを配列に変換する。\n（拡張）
タグ名取得 /// 引数：DOMから/DOMの\n説明：DOMのタグ名を取得する。\n（拡張）
